// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/grpcserver/proto/station_notice/station_notice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandleStationNoticeClient is the client API for HandleStationNotice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandleStationNoticeClient interface {
	StoreStationNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Response, error)
}

type handleStationNoticeClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleStationNoticeClient(cc grpc.ClientConnInterface) HandleStationNoticeClient {
	return &handleStationNoticeClient{cc}
}

func (c *handleStationNoticeClient) StoreStationNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/station_notice.HandleStationNotice/StoreStationNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleStationNoticeServer is the server API for HandleStationNotice service.
// All implementations must embed UnimplementedHandleStationNoticeServer
// for forward compatibility
type HandleStationNoticeServer interface {
	StoreStationNotice(context.Context, *NoticeInfo) (*Response, error)
	mustEmbedUnimplementedHandleStationNoticeServer()
}

// UnimplementedHandleStationNoticeServer must be embedded to have forward compatible implementations.
type UnimplementedHandleStationNoticeServer struct {
}

func (UnimplementedHandleStationNoticeServer) StoreStationNotice(context.Context, *NoticeInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStationNotice not implemented")
}
func (UnimplementedHandleStationNoticeServer) mustEmbedUnimplementedHandleStationNoticeServer() {}

// UnsafeHandleStationNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandleStationNoticeServer will
// result in compilation errors.
type UnsafeHandleStationNoticeServer interface {
	mustEmbedUnimplementedHandleStationNoticeServer()
}

func RegisterHandleStationNoticeServer(s grpc.ServiceRegistrar, srv HandleStationNoticeServer) {
	s.RegisterService(&HandleStationNotice_ServiceDesc, srv)
}

func _HandleStationNotice_StoreStationNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleStationNoticeServer).StoreStationNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/station_notice.HandleStationNotice/StoreStationNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleStationNoticeServer).StoreStationNotice(ctx, req.(*NoticeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// HandleStationNotice_ServiceDesc is the grpc.ServiceDesc for HandleStationNotice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandleStationNotice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "station_notice.HandleStationNotice",
	HandlerType: (*HandleStationNoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreStationNotice",
			Handler:    _HandleStationNotice_StoreStationNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpcserver/proto/station_notice/station_notice.proto",
}
