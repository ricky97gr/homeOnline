// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/grpcserver/proto/log/log.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OperationLog_AddOperationLog_FullMethodName = "/log.OperationLog/AddOperationLog"
)

// OperationLogClient is the client API for OperationLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationLogClient interface {
	AddOperationLog(ctx context.Context, in *OperationLogInfo, opts ...grpc.CallOption) (*Response, error)
}

type operationLogClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationLogClient(cc grpc.ClientConnInterface) OperationLogClient {
	return &operationLogClient{cc}
}

func (c *operationLogClient) AddOperationLog(ctx context.Context, in *OperationLogInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, OperationLog_AddOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationLogServer is the server API for OperationLog service.
// All implementations must embed UnimplementedOperationLogServer
// for forward compatibility
type OperationLogServer interface {
	AddOperationLog(context.Context, *OperationLogInfo) (*Response, error)
	mustEmbedUnimplementedOperationLogServer()
}

// UnimplementedOperationLogServer must be embedded to have forward compatible implementations.
type UnimplementedOperationLogServer struct {
}

func (UnimplementedOperationLogServer) AddOperationLog(context.Context, *OperationLogInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperationLog not implemented")
}
func (UnimplementedOperationLogServer) mustEmbedUnimplementedOperationLogServer() {}

// UnsafeOperationLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationLogServer will
// result in compilation errors.
type UnsafeOperationLogServer interface {
	mustEmbedUnimplementedOperationLogServer()
}

func RegisterOperationLogServer(s grpc.ServiceRegistrar, srv OperationLogServer) {
	s.RegisterService(&OperationLog_ServiceDesc, srv)
}

func _OperationLog_AddOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServer).AddOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLog_AddOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServer).AddOperationLog(ctx, req.(*OperationLogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationLog_ServiceDesc is the grpc.ServiceDesc for OperationLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.OperationLog",
	HandlerType: (*OperationLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOperationLog",
			Handler:    _OperationLog_AddOperationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpcserver/proto/log/log.proto",
}
